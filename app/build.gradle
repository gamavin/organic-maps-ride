buildscript {
  repositories {
    google()
    mavenCentral()
  }

  // Detect flavors from the task name.
  def taskName = getGradle().getStartParameter().getTaskRequests().toString().toLowerCase()
  def isFdroid = taskName.contains('fdroid')
  def isBeta = taskName.contains('beta')

  // Firebase Crashlytics compile-time feature flag: -Pfirebase=true|false
  def googleFirebaseServicesFlag = findProperty('firebase')
  // Enable Firebase for all beta flavors except fdroid only if google-services.json exists.
  def googleFirebaseServicesDefault = isBeta && !isFdroid && file("$projectDir/google-services.json").exists()
  ext.googleFirebaseServicesEnabled = googleFirebaseServicesFlag != null ?
          googleFirebaseServicesFlag == '' || googleFirebaseServicesFlag.toBoolean() :
          googleFirebaseServicesDefault

  dependencies {
    // AGP
    classpath 'com.android.tools.build:gradle:8.11.0'

    if (googleFirebaseServicesEnabled) {
      println('Building with Google Firebase Services')
      classpath 'com.google.gms:google-services:4.4.2'
      classpath 'com.google.firebase:firebase-crashlytics-gradle:3.0.2'
      classpath 'com.google.firebase:firebase-appdistribution-gradle:5.0.0'
    } else {
      println('Building without Google Firebase Services')
    }

    classpath('com.github.triplet.gradle:play-publisher:3.12.1')
    classpath('ru.cian:huawei-publish-gradle-plugin:1.4.2')
  }
}

// --- plugins block ---
plugins {
  id 'com.android.application'
  id 'org.jetbrains.kotlin.android'
  id 'org.jetbrains.kotlin.plugin.compose' version '2.2.10'
}

if (googleFirebaseServicesEnabled) {
  apply plugin: 'com.google.gms.google-services'
  apply plugin: 'com.google.firebase.crashlytics'
  apply plugin: 'com.google.firebase.appdistribution'
}
apply plugin: 'com.github.triplet.play'
apply plugin: 'ru.cian.huawei-publish-gradle-plugin'

import com.github.triplet.gradle.androidpublisher.ReleaseStatus

def getCommitMessage() {
  return run(['git', '--no-pager', 'show', '-s', '--format=%s%n%n%b', 'HEAD']).trim()
}

project.ext.appId = 'app.organicmaps'
project.ext.appName = 'Organic Maps'

android {
  namespace = 'app.organicmaps'

  // TODO: it should not be here, but in sdk/build.gradle. But for some reason it should be specified here as well.
  ndkVersion = '28.2.13676358'

  buildFeatures {
    dataBinding = true
    buildConfig = true
    compose = true
  }

  composeOptions {
    kotlinCompilerExtensionVersion = '1.5.3'
  }

  // Users are complaining that the app should be re-downloaded from the Play Store after changing the language.
  bundle {
    language {
      enableSplit = false
    }
  }

  // All properties are read from gradle.properties file
  compileSdk = propCompileSdkVersion.toInteger()

  defaultConfig {
    versionCode = rootProject.ext.versionCode
    versionName = rootProject.ext.versionName
    println('Version: ' + versionName)
    println('VersionCode: ' + versionCode)
    minSdk = propMinSdkVersion.toInteger()
    targetSdk = propTargetSdkVersion.toInteger()
    applicationId project.ext.appId
    buildConfigField 'String', 'SUPPORT_MAIL', '"android@organicmaps.app"'
    // Should be customized in flavors.
    buildConfigField 'String', 'REVIEW_URL', '""'
    resourceConfigurations += [project.ext.supportedLocalizations]

    base.archivesName = appName.replaceAll('\\s','') + '-' + defaultConfig.versionCode

    ndk.debugSymbolLevel = 'full'
  }

  flavorDimensions += 'default'

  productFlavors {
    // 01 is a historical artefact, sorry.
    final int HUAWEI_VERSION_CODE_BASE = 01_00_00_00_00

    google {
      dimension 'default'
      versionName = android.defaultConfig.versionName + '-Google'
      buildConfigField 'String', 'SUPPORT_MAIL', '"googleplay@organicmaps.app"'
      buildConfigField 'String', 'REVIEW_URL', '"market://details?id=app.organicmaps"'
    }

    web {
      dimension 'default'
      applicationIdSuffix '.web'
      versionName = android.defaultConfig.versionName + '-Web'
      buildConfigField 'String', 'SUPPORT_MAIL', '"apk@organicmaps.app"'
    }

    fdroid {
      dimension 'default'
      versionName = android.defaultConfig.versionName + '-FDroid'
      buildConfigField 'String', 'SUPPORT_MAIL', '"fdroid@organicmaps.app"'
    }

    huawei {
      dimension 'default'
      versionName = android.defaultConfig.versionName + '-Huawei'
      versionCode = HUAWEI_VERSION_CODE_BASE + android.defaultConfig.versionCode
      buildConfigField 'String', 'SUPPORT_MAIL', '"huawei@organicmaps.app"'
      buildConfigField 'String', 'REVIEW_URL', '"appmarket://details?id=app.organicmaps"'
    }
  }

  playConfigs {
    googleRelease {
      enabled.set(true)
    }
  }

  splits.abi {
    boolean enabled = project.hasProperty('splitApk')
    println ('Create separate apks: ' + enabled)
    enable = enabled
    reset()
    include 'x86', 'armeabi-v7a', 'arm64-v8a', 'x86_64'
    universalApk = true
  }

  lint {
    disable 'MissingTranslation'
    // https://github.com/organicmaps/organicmaps/issues/3551
    disable 'MissingQuantity', 'UnusedQuantity'
    // https://github.com/organicmaps/organicmaps/issues/3550
    disable 'ByteOrderMark'
    // https://github.com/organicmaps/organicmaps/issues/1077
    disable 'CustomSplashScreen'
    // https://github.com/organicmaps/organicmaps/issues/3610
    disable 'InsecureBaseConfiguration'
    abortOnError = true
  }

  gradle.projectsEvaluated {
    android.applicationVariants.all { variant ->
      def task = variant.name.capitalize()
      project.task(type: Exec, "run${task}", dependsOn: "install${task}") {
        commandLine android.getAdbExe(), 'shell', 'am', 'start', '-n', "$applicationId/app.organicmaps.DownloadResourcesActivity", '-a', 'android.intent.action.MAIN', '-c', 'android.intent.category.LAUNCHER'
      }
    }
  }

  def securityPropertiesFileExists = file('secure.properties').exists()
  if (securityPropertiesFileExists) {
    apply from: 'secure.properties'
  }

  signingConfigs {
    debug {
      storeFile file('debug.keystore')
      storePassword '12345678'
      keyAlias 'debug'
      keyPassword '12345678'
    }

    release {
      if (securityPropertiesFileExists) {
        println('The release signing keys are available')
        storeFile file(spropStoreFile)
        storePassword spropStorePassword
        keyAlias spropKeyAlias
        keyPassword spropKeyPassword
      } else {
        println('The release signing keys are unavailable')
      }
    }
  }

  buildTypes {
    debug {
      applicationIdSuffix '.debug'
      versionNameSuffix '-debug'
      zipAlignEnabled true
      signingConfig = signingConfigs.debug
      resValue 'string', 'app_name', 'Debug Organic Maps'

      if (googleFirebaseServicesEnabled) {
        firebaseCrashlytics {
          nativeSymbolUploadEnabled true
        }
      }
    }

    release {
      signingConfig = signingConfigs.release
      minifyEnabled true
      shrinkResources = true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
      resValue 'string', 'app_name', project.ext.appName

      if (googleFirebaseServicesEnabled) {
        firebaseCrashlytics {
          nativeSymbolUploadEnabled true
        }
      }
    }

    beta {
      applicationIdSuffix '.beta'
      versionNameSuffix '-beta'
      signingConfig = signingConfigs.release
      minifyEnabled true
      shrinkResources = true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
      matchingFallbacks = ['debug', 'release']
      resValue 'string', 'app_name', 'Beta Organic Maps'

      if (googleFirebaseServicesEnabled) {
        firebaseCrashlytics {
          nativeSymbolUploadEnabled true
        }
        firebaseAppDistribution {
          releaseNotes = getCommitMessage()
          groups = 'qa'
          serviceCredentialsFile = "$projectDir/firebase-app-distribution.json"
        }
      }
    }
  }

  androidResources {
    ignoreAssetsPattern = '!.svn:!.git:!.DS_Store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~'
    noCompress = ['txt', 'bin', 'html', 'png', 'json', 'mwm', 'ttf', 'sdf', 'ui', 'config', 'csv', 'spv', 'obj']
  }

  // ====== PENTING: Java/Kotlin 17 tanpa --release ======
  compileOptions {
    coreLibraryDesugaringEnabled = true
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }
  kotlinOptions {
    jvmTarget = '17'
  }
}

dependencies {
  implementation project(':sdk')

  coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.5'

  // Google Play Location Services
  webImplementation 'com.google.android.gms:play-services-location:21.3.0'
  googleImplementation 'com.google.android.gms:play-services-location:21.3.0'
  huaweiImplementation 'com.google.android.gms:play-services-location:21.3.0'
  fdroidImplementation 'org.microg.gms:play-services-location:0.3.6.244735'

  // Google Firebase Services
  if (googleFirebaseServicesEnabled) {
    implementation platform('com.google.firebase:firebase-bom:33.16.0')
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-crashlytics-ndk'
    implementation 'com.google.firebase:firebase-firestore-ktx'
  }

  // Workaround for duplicate classes
  implementation 'androidx.core:core:1.16.0'
  implementation(platform('org.jetbrains.kotlin:kotlin-bom:2.0.21'))
  implementation 'androidx.annotation:annotation:1.9.1'
  implementation 'androidx.appcompat:appcompat:1.7.1'
  implementation 'androidx.car.app:app:1.8.0-alpha02'
  implementation 'androidx.car.app:app-projected:1.8.0-alpha02'
  implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
  implementation 'androidx.fragment:fragment:1.8.8'
  implementation 'androidx.preference:preference:1.2.1'
  implementation 'androidx.recyclerview:recyclerview:1.4.0'
  implementation 'androidx.work:work-runtime:2.10.2'
  implementation 'androidx.lifecycle:lifecycle-process:2.9.1'
  implementation 'com.google.android.material:material:1.12.0'
  implementation 'com.google.guava:guava:33.4.8-android'
  implementation 'com.github.devnullorthrow:MPAndroidChart:3.2.0-alpha'
  implementation 'net.jcip:jcip-annotations:1.0'
  implementation project(':bitchatcore')
  implementation 'androidx.datastore:datastore-preferences:1.1.1'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.8.1'

  // ML Kit dependencies for KTP scanning and OCR
  implementation 'com.google.android.gms:play-services-mlkit-document-scanner:16.0.0-beta1'
  implementation 'com.google.mlkit:text-recognition:16.0.1'
  implementation 'io.coil-kt:coil-compose:2.7.0'

  // Jetpack Compose
  implementation platform('androidx.compose:compose-bom:2024.05.00')
  implementation 'androidx.compose.ui:ui'
  implementation 'androidx.compose.ui:ui-tooling-preview'
  implementation 'androidx.compose.material3:material3'
  implementation 'androidx.activity:activity-compose:1.9.2'
  implementation 'androidx.lifecycle:lifecycle-runtime-compose:2.9.1'
  implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.9.1'
  debugImplementation 'androidx.compose.ui:ui-tooling'

  // Tests
  androidTestImplementation 'androidx.test.ext:junit:1.2.1'
  testImplementation 'junit:junit:4.13.2'
  testImplementation 'org.mockito:mockito-core:5.18.0'
  testImplementation 'org.mockito:mockito-inline:5.2.0'
}

android.applicationVariants.all { variant ->
  def authorityValue = variant.applicationId + ".provider"
  def authority = "\"" + authorityValue + "\""
  variant.buildConfigField 'String', 'FILE_PROVIDER_AUTHORITY', authority
  def flavor = variant.getMergedFlavor()
  flavor.manifestPlaceholders += [FILE_PROVIDER_PLACEHOLDER : authorityValue]
  variant.resValue 'string', 'app_id', variant.applicationId
}

task prepareGoogleReleaseListing {
  // Prepares Google Play metainfo from F-Droid metainfo.
  final sourceFlavor = 'fdroid'
  final targetFlavor = 'google'
  doLast {
    final sourceDir = new File("${projectDir}/src/$sourceFlavor/play/listings")
    final targetDir = new File("${projectDir}/src/$targetFlavor/play/listings")
    final sourceFiles = fileTree(dir: sourceDir,
            include: '**/*.txt', exclude: "**/*-${targetFlavor}.txt")
    sourceFiles.each { File sourceFile ->
      final locale = sourceFile.parentFile.getName()
      final targetLocaleDir = new File(targetDir, locale)
      if (!targetLocaleDir.isDirectory())
        targetLocaleDir.mkdirs()
      final targetFile = new File(targetLocaleDir, sourceFile.getName())
      final overrideFile = new File(sourceFile.getPath().replace('.txt', "-${targetFlavor}.txt"))
      targetFile.text = overrideFile.exists() ? overrideFile.text : sourceFile.text
    }
    copy { from "${projectDir}/../../screenshots/android"; into targetDir }
  }
}

play {
  enabled.set(false)
  track.set('production')
  defaultToAppBundles.set(true)
  releaseStatus.set(ReleaseStatus.IN_PROGRESS)
  serviceAccountCredentials.set(file('google-play.json'))
}

huaweiPublish {
  instances {
    huaweiRelease {
      credentialsPath = "$projectDir/huawei-appgallery.json"
      buildFormat = 'aab'
      deployType = 'draft' // confirm manually
      def releaseDescriptions = []
      def localeOverride = [
              'am' : 'am-ET',
              'gu': 'gu_IN',
              'iw-IL': 'he_IL',
              'kn-IN': 'kn_IN',
              'ml-IN': 'ml_IN',
              'mn-MN': 'mn_MN',
              'mr-IN': 'mr_IN',
              'ta-IN': 'ta_IN',
              'te-IN': 'te_IN',
      ]
      def files = fileTree(dir: "$projectDir/src/fdroid/play/listings",
              include: '**/release-notes.txt')
      files.each { File file ->
        def path = file.getPath()
        def locale = file.parentFile.getName()
        locale = localeOverride.get(locale, locale)
        releaseDescriptions.add(new ru.cian.huawei.publish.ReleaseNote(locale, path))
      }
      releaseNotes = new ru.cian.huawei.publish.ReleaseNotesExtension(releaseDescriptions, true)
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}
