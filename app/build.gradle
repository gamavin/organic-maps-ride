import com.github.triplet.gradle.androidpublisher.ReleaseStatus

// app/build.gradle — Groovy (AGP 8.11.0, Kotlin 2.1.10 via settings.gradle)

plugins {
  id 'com.android.application'
  id 'org.jetbrains.kotlin.android'
  id 'org.jetbrains.kotlin.plugin.compose'
  id 'org.jetbrains.kotlin.kapt'
  id 'com.google.dagger.hilt.android'

  // Plugin yang diaplikasikan kondisional / belakangan
  id 'com.google.gms.google-services' version '4.4.3' apply false
  id 'com.google.firebase.crashlytics' version '3.0.6' apply false
  id 'com.google.firebase.appdistribution' version '5.1.1' apply false
  id 'com.github.triplet.play' version '3.12.1' apply false
  id 'ru.cian.huawei-publish-gradle-plugin' version '1.5.0' apply false
}

hilt {
  // Matikan task agregasi Hilt agar tidak menjalankan AggregateDepsTask
  // yang memicu NoSuchMethodError pada JavaPoet (canonicalName()).
  enableAggregatingTask = false
}

// ====== DETEKSI Firebase & JSON ======
def taskName = gradle.startParameter.taskRequests.toString().toLowerCase()
def isFdroid = taskName.contains('fdroid')

// Bisa override via -Pfirebase=true|false
def googleFirebaseServicesFlag = findProperty('firebase')

// Best practice: satu file JSON saja di sourceSet "google"
def jsonGoogle = file("$projectDir/src/google/google-services.json").exists()
// Hanya untuk logging; folder ini memang tidak dipakai
def jsonGoogleDebug = file("$projectDir/src/googleDebug/google-services.json").exists()

ext.googleFirebaseServicesEnabled = (googleFirebaseServicesFlag != null)
        ? (googleFirebaseServicesFlag == '' || googleFirebaseServicesFlag.toBoolean())
        : (!isFdroid && (jsonGoogle || jsonGoogleDebug))

println ext.googleFirebaseServicesEnabled
        ? "Building with Google Firebase Services (jsonGoogle=${jsonGoogle}, jsonGoogleDebug=${jsonGoogleDebug})"
        : "Building without Google Firebase Services"

// Apply plugin kondisional
if (project.ext.googleFirebaseServicesEnabled) {
  apply plugin: 'com.google.gms.google-services'
  apply plugin: 'com.google.firebase.crashlytics'
  apply plugin: 'com.google.firebase.appdistribution'
}
apply plugin: 'com.github.triplet.play'
apply plugin: 'ru.cian.huawei-publish-gradle-plugin'

// App id & nama (dipakai di bawah)
project.ext.appId = 'app.organicmaps'
project.ext.appName = 'Organic Maps'

// -----------------------------------------------------------
// Compose compiler via DSL resmi Kotlin plugin
// -----------------------------------------------------------
composeCompiler {
  // reportsDestination = layout.buildDirectory.dir("compose-reports")
  // metricsDestination  = layout.buildDirectory.dir("compose-metrics")
}

android {
  namespace = 'app.organicmaps'
  ndkVersion = '28.2.13676358'

  buildFeatures {
    dataBinding = true
    buildConfig = true
    compose = true
  }

  bundle { language { enableSplit = false } }

  compileSdk = propCompileSdkVersion.toInteger()

  defaultConfig {
    versionCode = rootProject.ext.versionCode
    versionName = rootProject.ext.versionName
    println('Version: ' + versionName)
    println('VersionCode: ' + versionCode)

    minSdk = propMinSdkVersion.toInteger()
    targetSdk = propTargetSdkVersion.toInteger()

    applicationId project.ext.appId
    buildConfigField 'String', 'SUPPORT_MAIL', '"android@organicmaps.app"'
    buildConfigField 'String', 'REVIEW_URL', '""'
    resourceConfigurations += [project.ext.supportedLocalizations]

    base.archivesName = project.ext.appName.replaceAll('\\s','') + '-' + defaultConfig.versionCode
    ndk.debugSymbolLevel = 'full'
  }

  flavorDimensions += 'default'

  productFlavors {
    final int HUAWEI_VERSION_CODE_BASE = 01_00_00_00_00

    google {
      dimension 'default'
      // Firestore minSdk >= 23
      minSdk 23
      versionName = android.defaultConfig.versionName + '-Google'
      buildConfigField 'String', 'SUPPORT_MAIL', '"googleplay@organicmaps.app"'
      buildConfigField 'String', 'REVIEW_URL', '"market://details?id=app.organicmaps"'
    }

    web {
      dimension 'default'
      minSdk 23
      applicationIdSuffix '.web'
      versionName = android.defaultConfig.versionName + '-Web'
      buildConfigField 'String', 'SUPPORT_MAIL', '"apk@organicmaps.app"'
    }

    fdroid {
      dimension 'default'
      // Tanpa Firebase
      minSdk 21
      versionName = android.defaultConfig.versionName + '-FDroid'
      buildConfigField 'String', 'SUPPORT_MAIL', '"fdroid@organicmaps.app"'
    }

    huawei {
      dimension 'default'
      minSdk 23
      versionName = android.defaultConfig.versionName + '-Huawei'
      versionCode = HUAWEI_VERSION_CODE_BASE + android.defaultConfig.versionCode
      buildConfigField 'String', 'SUPPORT_MAIL', '"huawei@organicmaps.app"'
      buildConfigField 'String', 'REVIEW_URL', '"appmarket://details?id=app.organicmaps"'
    }
  }

  // Pastikan FDroid tidak compile kelas-kelas GMS
  sourceSets {
    fdroid {
      java {
        exclude '**/GoogleFusedLocationProvider.*'
        exclude '**/Google*Location*.kt'
        exclude '**/Google*Location*.java'
      }
    }
  }

  playConfigs { googleRelease { enabled.set(true) } }

  splits.abi {
    boolean enabled = project.hasProperty('splitApk')
    println('Create separate apks: ' + enabled)
    enable = enabled
    reset()
    include 'x86', 'armeabi-v7a', 'arm64-v8a', 'x86_64'
    universalApk = true
  }

  lint {
    disable 'MissingTranslation'
    disable 'MissingQuantity', 'UnusedQuantity'
    disable 'ByteOrderMark'
    disable 'CustomSplashScreen'
    disable 'InsecureBaseConfiguration'
    abortOnError = true
  }

  gradle.projectsEvaluated {
    android.applicationVariants.configureEach { variant ->
      def task = variant.name.capitalize()
      project.task(type: Exec, "run${task}", dependsOn: "install${task}") {
        commandLine android.getAdbExe(), 'shell', 'am', 'start', '-n',
                "$applicationId/app.organicmaps.DownloadResourcesActivity",
                '-a', 'android.intent.action.MAIN', '-c', 'android.intent.category.LAUNCHER'
      }
    }
  }

  def securityPropertiesFileExists = file('secure.properties').exists()
  if (securityPropertiesFileExists) {
    apply from: 'secure.properties'
  }

  signingConfigs {
    debug {
      storeFile file('debug.keystore')
      storePassword '12345678'
      keyAlias 'debug'
      keyPassword '12345678'
    }
    release {
      if (securityPropertiesFileExists) {
        println('The release signing keys are available')
        storeFile file(spropStoreFile)
        storePassword spropStorePassword
        keyAlias spropKeyAlias
        keyPassword spropKeyPassword
      } else {
        println('The release signing keys are unavailable')
      }
    }
  }

  buildTypes {
    debug {
      applicationIdSuffix '.debug'
      versionNameSuffix '-debug'
      zipAlignEnabled true
      signingConfig = signingConfigs.debug
      resValue 'string', 'app_name', 'Debug Organic Maps'
      if (project.ext.googleFirebaseServicesEnabled) {
        firebaseCrashlytics { nativeSymbolUploadEnabled true }
      }
    }

    release {
      signingConfig = signingConfigs.release
      minifyEnabled true
      shrinkResources = true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
      resValue 'string', 'app_name', project.ext.appName
      if (project.ext.googleFirebaseServicesEnabled) {
        firebaseCrashlytics { nativeSymbolUploadEnabled true }
      }
    }

    beta {
      applicationIdSuffix '.beta'
      versionNameSuffix '-beta'
      signingConfig = signingConfigs.release
      minifyEnabled true
      shrinkResources = true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
      matchingFallbacks = ['debug', 'release']
      resValue 'string', 'app_name', 'Beta Organic Maps'
      if (project.ext.googleFirebaseServicesEnabled) {
        firebaseCrashlytics { nativeSymbolUploadEnabled true }
        firebaseAppDistribution {
          releaseNotes = run(['git', '--no-pager', 'show', '-s', '--format=%s%n%n%b', 'HEAD']).trim()
          groups = 'qa'
          serviceCredentialsFile = "$projectDir/firebase-app-distribution.json"
        }
      }
    }
  }

  androidResources {
    ignoreAssetsPattern = '!.svn:!.git:!.DS_Store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~'
    noCompress = ['txt', 'bin', 'html', 'png', 'json', 'mwm', 'ttf', 'sdf', 'ui', 'config', 'csv', 'spv', 'obj']
  }

  // Java/Kotlin 17
  compileOptions {
    coreLibraryDesugaringEnabled = true
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }
  kotlinOptions { jvmTarget = '17' }
}

// ---------- EXCLUDE GMS DI FDROID ----------
configurations {
  fdroidImplementation {
    exclude group: 'com.google.android.gms'
  }
}

// ---------- PIN JAVAPOET UNTUK HILT ----------
configurations.configureEach {
  resolutionStrategy.eachDependency { details ->
    if (details.requested.group == 'com.squareup' && details.requested.name == 'javapoet') {
      details.useVersion '1.13.0'
      details.because 'Hilt/Dagger 2.57 expect JavaPoet 1.x; avoid NoSuchMethodError in hiltAggregateDeps'
    }
  }
}

// ===== Dependencies =====
dependencies {
  implementation project(':sdk')

  coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.5'

  // Google Play Location Services / microG by flavor
  webImplementation    'com.google.android.gms:play-services-location:21.3.0'
  googleImplementation 'com.google.android.gms:play-services-location:21.3.0'
  huaweiImplementation 'com.google.android.gms:play-services-location:21.3.0'
  fdroidImplementation 'org.microg.gms:play-services-location:0.3.6.244735'

  // ===== Firebase — hanya untuk flavor non-FDroid =====
  if (project.ext.googleFirebaseServicesEnabled) {
    def fbBom = platform('com.google.firebase:firebase-bom:34.1.0')
    googleImplementation fbBom
    webImplementation    fbBom
    huaweiImplementation fbBom

    googleImplementation 'com.google.firebase:firebase-crashlytics'
    googleImplementation 'com.google.firebase:firebase-crashlytics-ndk'
    googleImplementation 'com.google.firebase:firebase-firestore'

    webImplementation    'com.google.firebase:firebase-crashlytics'
    webImplementation    'com.google.firebase:firebase-crashlytics-ndk'
    webImplementation    'com.google.firebase:firebase-firestore'

    huaweiImplementation 'com.google.firebase:firebase-crashlytics'
    huaweiImplementation 'com.google.firebase:firebase-crashlytics-ndk'
    huaweiImplementation 'com.google.firebase:firebase-firestore'
  }

  // ML Kit (khusus flavor GMS)
  googleImplementation 'com.google.android.gms:play-services-mlkit-document-scanner:16.0.0-beta1'
  webImplementation    'com.google.android.gms:play-services-mlkit-document-scanner:16.0.0-beta1'
  huaweiImplementation 'com.google.android.gms:play-services-mlkit-document-scanner:16.0.0-beta1'

  googleImplementation 'com.google.mlkit:text-recognition:16.0.1'
  webImplementation    'com.google.mlkit:text-recognition:16.0.1'
  huaweiImplementation 'com.google.mlkit:text-recognition:16.0.1'

  // Workaround for duplicate classes
  implementation 'androidx.core:core-ktx:1.17.0'
  implementation(platform('org.jetbrains.kotlin:kotlin-bom:2.2.10'))
  implementation 'androidx.annotation:annotation:1.9.1'
  implementation 'androidx.appcompat:appcompat:1.7.1'
  implementation 'androidx.car.app:app:1.8.0-alpha02'
  implementation 'androidx.car.app:app-projected:1.8.0-alpha02'
  implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
  implementation 'androidx.fragment:fragment-ktx:1.8.9'
  implementation 'androidx.preference:preference-ktx:1.2.1'
  implementation 'androidx.recyclerview:recyclerview:1.4.0'
  implementation 'androidx.work:work-runtime:2.10.3'
  implementation 'androidx.lifecycle:lifecycle-process:2.9.2'
  implementation 'com.google.android.material:material:1.12.0'
  implementation 'com.google.guava:guava:33.4.8-android'
  implementation 'com.github.devnullorthrow:MPAndroidChart:3.2.0-alpha'
  implementation 'net.jcip:jcip-annotations:1.0'
  implementation project(':bitchatcore')
  implementation 'androidx.datastore:datastore-preferences:1.1.7'
  implementation 'io.coil-kt:coil-compose:2.7.0'

  // Jetpack Compose (BOM)
  implementation platform('androidx.compose:compose-bom:2025.08.00')
  implementation 'androidx.compose.ui:ui'
  implementation 'androidx.compose.ui:ui-tooling-preview'
  implementation 'androidx.compose.material3:material3'
  implementation 'androidx.activity:activity-compose:1.10.1'
  implementation 'androidx.lifecycle:lifecycle-runtime-compose:2.9.2'
  implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.9.2'
  debugImplementation 'androidx.compose.ui:ui-tooling'

  // Bitride: Navigation + Hilt Compose untuk flavor non-FDroid
  googleImplementation 'androidx.navigation:navigation-compose:2.9.3'
  webImplementation    'androidx.navigation:navigation-compose:2.9.3'
  huaweiImplementation 'androidx.navigation:navigation-compose:2.9.3'

  googleImplementation 'androidx.hilt:hilt-navigation-compose:1.2.0'
  webImplementation    'androidx.hilt:hilt-navigation-compose:1.2.0'
  huaweiImplementation 'androidx.hilt:hilt-navigation-compose:1.2.0'

  // Dagger Hilt — pakai KAPT
  implementation 'com.google.dagger:hilt-android:2.57'
  kapt          'com.google.dagger:hilt-compiler:2.57'

  // Pin juga sebagai constraint agar tidak ikut ter-package
  constraints {
    implementation('com.squareup:javapoet:1.13.0') {
      because 'Hilt/Dagger 2.57 expect JavaPoet 1.x; avoid NoSuchMethodError in hiltAggregateDeps'
    }
  }

  // Tests
  androidTestImplementation 'androidx.test.ext:junit:1.3.0'
  testImplementation 'junit:junit:4.13.2'
  testImplementation 'org.mockito:mockito-core:5.18.0'
  testImplementation 'org.mockito:mockito-inline:5.2.0'
}

kapt {
  correctErrorTypes = true
}

// Inject FILE_PROVIDER_* ke setiap varian
android.applicationVariants.configureEach { variant ->
  def authorityValue = variant.applicationId + ".provider"
  def authority = "\"" + authorityValue + "\""
  variant.buildConfigField 'String', 'FILE_PROVIDER_AUTHORITY', authority
  def flavor = variant.getMergedFlavor()
  flavor.manifestPlaceholders += [FILE_PROVIDER_PLACEHOLDER : authorityValue]
  variant.resValue 'string', 'app_id', variant.applicationId
}

// Prepares Google Play metainfo from F-Droid metainfo.
tasks.register('prepareGoogleReleaseListing') {
  final sourceFlavor = 'fdroid'
  final targetFlavor = 'google'
  doLast {
    final sourceDir = new File("${projectDir}/src/$sourceFlavor/play/listings")
    final targetDir = new File("${projectDir}/src/$targetFlavor/play/listings")
    final sourceFiles = fileTree(dir: sourceDir, include: '**/*.txt', exclude: "**/*-${targetFlavor}.txt")
    sourceFiles.each { File sourceFile ->
      final locale = sourceFile.parentFile.getName()
      final targetLocaleDir = new File(targetDir, locale)
      if (!targetLocaleDir.isDirectory()) targetLocaleDir.mkdirs()
      final targetFile = new File(targetLocaleDir, sourceFile.getName())
      final overrideFile = new File(sourceFile.getPath().replace('.txt', "-${targetFlavor}.txt"))
      targetFile.text = overrideFile.exists() ? overrideFile.text : sourceFile.text
    }
    copy { from "${projectDir}/../../screenshots/android"; into targetDir }
  }
}

play {
  enabled.set(false)
  track.set('production')
  defaultToAppBundles.set(true)
  releaseStatus.set(ReleaseStatus.IN_PROGRESS)
  serviceAccountCredentials.set(file('google-play.json'))
}

huaweiPublish {
  instances {
    huaweiRelease {
      credentialsPath = "$projectDir/huawei-appgallery.json"
      buildFormat = 'aab'
      deployType = 'draft'
      def releaseDescriptions = []
      def localeOverride = [
              'am':'am-ET','gu':'gu_IN','iw-IL':'he_IL','kn-IN':'kn_IN',
              'ml-IN':'ml_IN','mn-MN':'mn_MN','mr-IN':'mr_IN','ta-IN':'ta_IN','te-IN':'te_IN',
      ]
      def files = fileTree(dir: "$projectDir/src/fdroid/play/listings", include: '**/release-notes.txt')
      files.each { File file ->
        def path = file.getPath()
        def locale = file.parentFile.getName()
        locale = localeOverride.get(locale, locale)
        releaseDescriptions.add(new ru.cian.huawei.publish.ReleaseNote(locale, path))
      }
      releaseNotes = new ru.cian.huawei.publish.ReleaseNotesExtension(releaseDescriptions, true)
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}
